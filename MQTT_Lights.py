#!/usr/bin/env python3

#imports
import smbus
import time
import socket
import random
import paho.mqtt.client as paho

#variables
bus       = smbus.SMBus(1) # use 1 for Rev 2 Pi, Use 0 for Rev 1 Pi
swirlTime = 0.1            # how quick the swirl patern runs
blinkTime = 0.2            # how fast the lights blink
broker    = "127.0.0.1"    # address of MQTT Broker
waitTime  = 10             # how long it waits before going Idle

# Device Addresses
devices = [ 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, ]
# Use only one device for testing, comment out to use all
# devices = [ 0x20 ]

colors = [ "red", "yellow", "green", "blue", "purple", "white", "lightblue", ]

# Registers A are for GPA pins, Registers B are for GPB pins
IODIRA = 0x00 # Register A for pin direction
IODIRB = 0x01 # Register B for pin direction
OLATA  = 0x14 # Register A for outputs
OLATB  = 0x15 # Register B for outputs

banks = [ OLATA, OLATB, ]
random.seed()

#functions
def setup(device):
    # print(f"Setting up device #0x{device}")
    # Set GPA and GPB pins to outputs
    bus.write_byte_data(device,IODIRA,0x00)
    bus.write_byte_data(device,IODIRB,0x00)
    # Set all outputs to off
    bus.write_byte_data(device,OLATA,0x00)
    bus.write_byte_data(device,OLATB,0x00)
    #set lights to idle state
    idleState(device)

#light animations
def clear(addr):
    bus.write_byte_data(addr,OLATA,0x00)
    bus.write_byte_data(addr,OLATB,0x00)

def errorState():
    purpleBlink(devices[0])

def idleState(addr):
    bus.write_byte_data(addr,OLATB,0x80)

#Blinks
def redBlink(addr):
    bus.write_byte_data(addr,OLATA,0x49)
    bus.write_byte_data(addr,OLATB,0x12)
    time.sleep(blinkTime)
    bus.write_byte_data(addr,OLATA,0x00)
    bus.write_byte_data(addr,OLATB,0x00)
    time.sleep(blinkTime)

def blueBlink(addr):
    bus.write_byte_data(addr,OLATA,0x92)
    bus.write_byte_data(addr,OLATB,0x24)
    time.sleep(blinkTime)
    bus.write_byte_data(addr,OLATA,0x00)
    bus.write_byte_data(addr,OLATB,0x00)
    time.sleep(blinkTime)

def purpleBlink(addr):
    bus.write_byte_data(addr,OLATA,0xDB)
    bus.write_byte_data(addr,OLATB,0x36)
    time.sleep(blinkTime)
    bus.write_byte_data(addr,OLATA,0x00)
    bus.write_byte_data(addr,OLATB,0x00)
    time.sleep(blinkTime)

def greenBlink(addr):
    bus.write_byte_data(addr,OLATA,0x24)
    bus.write_byte_data(addr,OLATB,0x49)
    time.sleep(blinkTime)
    bus.write_byte_data(addr,OLATA,0x00)
    bus.write_byte_data(addr,OLATB,0x00)
    time.sleep(blinkTime)

def yellowBlink(addr):
    bus.write_byte_data(addr,OLATA,0x6D)
    bus.write_byte_data(addr,OLATB,0x5B)
    time.sleep(blinkTime)
    bus.write_byte_data(addr,OLATA,0x00)
    bus.write_byte_data(addr,OLATB,0x00)
    time.sleep(blinkTime)

def lightBlueBlink(addr):
    bus.write_byte_data(addr,OLATA,0xB6)
    bus.write_byte_data(addr,OLATB,0x6D)
    time.sleep(blinkTime)
    bus.write_byte_data(addr,OLATA,0x00)
    bus.write_byte_data(addr,OLATB,0x00)
    time.sleep(blinkTime)

def whiteBlink(addr):
    bus.write_byte_data(addr,OLATA,0xFF)
    bus.write_byte_data(addr,OLATB,0x7F)
    time.sleep(blinkTime)
    bus.write_byte_data(addr,OLATA,0x00)
    bus.write_byte_data(addr,OLATB,0x00)
    time.sleep(blinkTime)

#Swirls
def redSwirl(addr):
    bus.write_byte_data(addr,OLATA,0x01)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATA,0x08)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATA,0x40)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATA,0x00)
    bus.write_byte_data(addr,OLATB,0x02)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATB,0x10)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATB,0x00)
    time.sleep(swirlTime)

def blueSwirl(addr):
    bus.write_byte_data(addr,OLATA,0x02)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATA,0x10)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATA,0x80)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATA,0x00)
    bus.write_byte_data(addr,OLATB,0x04)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATB,0x20)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATB,0x00)
    time.sleep(swirlTime)

def greenSwirl(addr):
    bus.write_byte_data(addr,OLATA,0x04)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATA,0x20)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATA,0x00)
    bus.write_byte_data(addr,OLATB,0x01)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATB,0x08)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATB,0x40)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATB,0x00)
    time.sleep(swirlTime)

def purpleSwirl(addr):
    bus.write_byte_data(addr,OLATA,0x03)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATA,0x18)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATA,0xc0)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATA,0x00)
    bus.write_byte_data(addr,OLATB,0x06)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATB,0x30)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATB,0x00)
    time.sleep(swirlTime)

def yellowSwirl(addr):
    bus.write_byte_data(addr,OLATA,0x05)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATA,0x28)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATA,0x40)
    bus.write_byte_data(addr,OLATB,0x01)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATA,0x00)
    bus.write_byte_data(addr,OLATB,0x0A)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATB,0x50)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATB,0x00)
    time.sleep(swirlTime)

def lightBlueSwirl(addr):
    bus.write_byte_data(addr,OLATA,0x06)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATA,0x30)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATA,0x80)
    bus.write_byte_data(addr,OLATB,0x01)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATA,0x00)
    bus.write_byte_data(addr,OLATB,0x0C)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATB,0x60)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATB,0x00)
    time.sleep(swirlTime)

def whiteSwirl(addr):
    bus.write_byte_data(addr,OLATA,0x07)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATA,0x38)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATA,0xC0)
    bus.write_byte_data(addr,OLATB,0x01)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATA,0x00)
    bus.write_byte_data(addr,OLATB,0x0E)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATB,0x70)
    time.sleep(swirlTime)
    bus.write_byte_data(addr,OLATB,0x00)
    time.sleep(swirlTime)

#test sequince
def test():
    lightBlueBlink(devices[0])
    lightBlueSwirl(devices[0])
    idleState(devices[0])
    lightBlueBlink(devices[1])
    lightBlueSwirl(devices[1])
    idleState(devices[1])
    lightBlueBlink(devices[2])
    lightBlueSwirl(devices[2])
    idleState(devices[2])
    lightBlueBlink(devices[3])
    lightBlueSwirl(devices[3])
    idleState(devices[3])
    lightBlueBlink(devices[4])
    lightBlueSwirl(devices[4])
    idleState(devices[4])
    lightBlueBlink(devices[5])
    lightBlueSwirl(devices[5])
    idleState(devices[5])
    lightBlueBlink(devices[6])
    lightBlueSwirl(devices[6])
    idleState(devices[6])
    lightBlueBlink(devices[7])
    lightBlueSwirl(devices[7])
    idleState(devices[7])
    blueBlink(devices[0])
    blueSwirl(devices[0])
    idleState(devices[0])
    blueBlink(devices[1])
    blueSwirl(devices[1])
    idleState(devices[1])
    blueBlink(devices[2])
    blueSwirl(devices[2])
    idleState(devices[2])
    blueBlink(devices[3])
    blueSwirl(devices[3])
    idleState(devices[3])
    blueBlink(devices[4])
    blueSwirl(devices[4])
    idleState(devices[4])
    blueBlink(devices[5])
    blueSwirl(devices[5])
    idleState(devices[5])
    blueBlink(devices[6])
    blueSwirl(devices[6])
    idleState(devices[6])
    blueBlink(devices[7])
    blueSwirl(devices[7])
    idleState(devices[7])
    purpleBlink(devices[0])
    purpleSwirl(devices[0])
    idleState(devices[0])
    purpleBlink(devices[1])
    purpleSwirl(devices[1])
    idleState(devices[1])
    purpleBlink(devices[2])
    purpleSwirl(devices[2])
    idleState(devices[2])
    purpleBlink(devices[3])
    purpleSwirl(devices[3])
    idleState(devices[3])
    purpleBlink(devices[4])
    purpleSwirl(devices[4])
    idleState(devices[4])
    purpleBlink(devices[5])
    purpleSwirl(devices[5])
    idleState(devices[5])
    purpleBlink(devices[6])
    purpleSwirl(devices[6])
    idleState(devices[6])
    purpleBlink(devices[7])
    purpleSwirl(devices[7])
    idleState(devices[7])
    redBlink(devices[0])
    redSwirl(devices[0])
    idleState(devices[0])
    redBlink(devices[1])
    redSwirl(devices[1])
    idleState(devices[1])
    redBlink(devices[2])
    redSwirl(devices[2])
    idleState(devices[2])
    redBlink(devices[3])
    redSwirl(devices[3])
    idleState(devices[3])
    redBlink(devices[4])
    redSwirl(devices[4])
    idleState(devices[4])
    redBlink(devices[5])
    redSwirl(devices[5])
    idleState(devices[5])
    redBlink(devices[6])
    redSwirl(devices[6])
    idleState(devices[6])
    redBlink(devices[7])
    redSwirl(devices[7])
    idleState(devices[7])
    yellowBlink(devices[0])
    yellowSwirl(devices[0])
    idleState(devices[0])
    yellowBlink(devices[1])
    yellowSwirl(devices[1])
    idleState(devices[1])
    yellowBlink(devices[2])
    yellowSwirl(devices[2])
    idleState(devices[2])
    yellowBlink(devices[3])
    yellowSwirl(devices[3])
    idleState(devices[3])
    yellowBlink(devices[4])
    yellowSwirl(devices[4])
    idleState(devices[4])
    yellowBlink(devices[5])
    yellowSwirl(devices[5])
    idleState(devices[5])
    yellowBlink(devices[6])
    yellowSwirl(devices[6])
    idleState(devices[6])
    yellowBlink(devices[7])
    yellowSwirl(devices[7])
    idleState(devices[7])
    greenBlink(devices[0])
    greenSwirl(devices[0])
    idleState(devices[0])
    greenBlink(devices[1])
    greenSwirl(devices[1])
    idleState(devices[1])
    greenBlink(devices[2])
    greenSwirl(devices[2])
    idleState(devices[2])
    greenBlink(devices[3])
    greenSwirl(devices[3])
    idleState(devices[3])
    greenBlink(devices[4])
    greenSwirl(devices[4])
    idleState(devices[4])
    greenBlink(devices[5])
    greenSwirl(devices[5])
    idleState(devices[5])
    greenBlink(devices[6])
    greenSwirl(devices[6])
    idleState(devices[6])
    greenBlink(devices[7])
    greenSwirl(devices[7])
    idleState(devices[7])
    whiteBlink(devices[0])
    whiteSwirl(devices[0])
    idleState(devices[0])
    whiteBlink(devices[1])
    whiteSwirl(devices[1])
    idleState(devices[1])
    whiteBlink(devices[2])
    whiteSwirl(devices[2])
    idleState(devices[2])
    whiteBlink(devices[3])
    whiteSwirl(devices[3])
    idleState(devices[3])
    whiteBlink(devices[4])
    whiteSwirl(devices[4])
    idleState(devices[4])
    whiteBlink(devices[5])
    whiteSwirl(devices[5])
    idleState(devices[5])
    whiteBlink(devices[6])
    whiteSwirl(devices[6])
    idleState(devices[6])
    whiteBlink(devices[7])
    whiteSwirl(devices[7])
    idleState(devices[7])

#animations for years
def rampUp():
    allClear()
    bus.write_byte_data(devices[0],OLATA,0x05)
    bus.write_byte_data(devices[1],OLATA,0x05)
    time.sleep(swirlTime)
    bus.write_byte_data(devices[0],OLATA,0x28)
    bus.write_byte_data(devices[1],OLATA,0x28)
    bus.write_byte_data(devices[2],OLATA,0x05)
    time.sleep(swirlTime)
    bus.write_byte_data(devices[0],OLATA,0x40)
    bus.write_byte_data(devices[0],OLATB,0x01)
    bus.write_byte_data(devices[1],OLATA,0x40)
    bus.write_byte_data(devices[1],OLATB,0x01)
    bus.write_byte_data(devices[2],OLATA,0x28)
    bus.write_byte_data(devices[3],OLATA,0x05)
    time.sleep(swirlTime)
    bus.write_byte_data(devices[0],OLATA,0x00)
    bus.write_byte_data(devices[0],OLATB,0x0A)
    bus.write_byte_data(devices[1],OLATA,0x00)
    bus.write_byte_data(devices[1],OLATB,0x0A)
    bus.write_byte_data(devices[2],OLATA,0x40)
    bus.write_byte_data(devices[2],OLATB,0x01)
    bus.write_byte_data(devices[3],OLATA,0x28)
    bus.write_byte_data(devices[4],OLATA,0x05)
    time.sleep(swirlTime)
    bus.write_byte_data(devices[0],OLATB,0x50)
    bus.write_byte_data(devices[1],OLATB,0x50)
    bus.write_byte_data(devices[2],OLATA,0x00)
    bus.write_byte_data(devices[2],OLATB,0x0A)
    bus.write_byte_data(devices[3],OLATA,0x40)
    bus.write_byte_data(devices[3],OLATB,0x01)
    bus.write_byte_data(devices[4],OLATA,0x28)
    bus.write_byte_data(devices[5],OLATA,0x05)  
    time.sleep(swirlTime)
    bus.write_byte_data(devices[0],OLATB,0x00)
    bus.write_byte_data(devices[1],OLATB,0x00)
    bus.write_byte_data(devices[0],OLATA,0x05)
    bus.write_byte_data(devices[1],OLATA,0x05)
    bus.write_byte_data(devices[2],OLATB,0x50)
    bus.write_byte_data(devices[3],OLATA,0x00)
    bus.write_byte_data(devices[3],OLATB,0x0A)
    bus.write_byte_data(devices[4],OLATA,0x40)
    bus.write_byte_data(devices[4],OLATB,0x01)
    bus.write_byte_data(devices[5],OLATA,0x28)
    bus.write_byte_data(devices[6],OLATA,0x05) 
    time.sleep(swirlTime)
    bus.write_byte_data(devices[0],OLATA,0x28)
    bus.write_byte_data(devices[1],OLATA,0x28)
    bus.write_byte_data(devices[2],OLATB,0x00)
    bus.write_byte_data(devices[2],OLATA,0x05)
    bus.write_byte_data(devices[3],OLATB,0x50)
    bus.write_byte_data(devices[4],OLATA,0x00)
    bus.write_byte_data(devices[4],OLATB,0x0A)
    bus.write_byte_data(devices[5],OLATA,0x40)
    bus.write_byte_data(devices[5],OLATB,0x01)
    bus.write_byte_data(devices[6],OLATA,0x28)
    bus.write_byte_data(devices[7],OLATA,0x05)
    time.sleep(swirlTime)
    
def fullSwirl():
    bus.write_byte_data(devices[2],OLATA,0x28)
    bus.write_byte_data(devices[3],OLATB,0x00)
    bus.write_byte_data(devices[3],OLATA,0x05)
    bus.write_byte_data(devices[4],OLATB,0x50)
    bus.write_byte_data(devices[5],OLATA,0x00)
    bus.write_byte_data(devices[5],OLATB,0x0A)
    bus.write_byte_data(devices[6],OLATA,0x40)
    bus.write_byte_data(devices[6],OLATB,0x01)
    bus.write_byte_data(devices[7],OLATA,0x28)
    bus.write_byte_data(devices[1],OLATB,0x00)
    bus.write_byte_data(devices[1],OLATA,0x05)
    bus.write_byte_data(devices[0],OLATB,0x00)
    bus.write_byte_data(devices[0],OLATA,0x05)
    time.sleep(swirlTime)
    bus.write_byte_data(devices[3],OLATA,0x28)
    bus.write_byte_data(devices[4],OLATB,0x00)
    bus.write_byte_data(devices[4],OLATA,0x05)
    bus.write_byte_data(devices[5],OLATB,0x50)
    bus.write_byte_data(devices[6],OLATA,0x00)
    bus.write_byte_data(devices[6],OLATB,0x0A)
    bus.write_byte_data(devices[7],OLATA,0x40)
    bus.write_byte_data(devices[7],OLATB,0x01)
    bus.write_byte_data(devices[1],OLATA,0x28)
    bus.write_byte_data(devices[2],OLATB,0x00)
    bus.write_byte_data(devices[2],OLATA,0x05)
    bus.write_byte_data(devices[0],OLATA,0x28)
    time.sleep(swirlTime)
    bus.write_byte_data(devices[4],OLATA,0x28)
    bus.write_byte_data(devices[5],OLATB,0x00)
    bus.write_byte_data(devices[5],OLATA,0x05)
    bus.write_byte_data(devices[6],OLATB,0x50)
    bus.write_byte_data(devices[7],OLATA,0x00)
    bus.write_byte_data(devices[7],OLATB,0x0A)
    bus.write_byte_data(devices[1],OLATA,0x40)
    bus.write_byte_data(devices[1],OLATB,0x01)
    bus.write_byte_data(devices[2],OLATA,0x28)
    bus.write_byte_data(devices[3],OLATB,0x00)
    bus.write_byte_data(devices[3],OLATA,0x05)
    bus.write_byte_data(devices[0],OLATA,0x40)
    bus.write_byte_data(devices[0],OLATB,0x01)
    time.sleep(swirlTime)
    bus.write_byte_data(devices[5],OLATA,0x28)
    bus.write_byte_data(devices[6],OLATB,0x00)
    bus.write_byte_data(devices[6],OLATA,0x05)
    bus.write_byte_data(devices[7],OLATB,0x50)
    bus.write_byte_data(devices[1],OLATA,0x00)
    bus.write_byte_data(devices[1],OLATB,0x0A)
    bus.write_byte_data(devices[2],OLATA,0x40)
    bus.write_byte_data(devices[2],OLATB,0x01)
    bus.write_byte_data(devices[3],OLATA,0x28)
    bus.write_byte_data(devices[4],OLATB,0x00)
    bus.write_byte_data(devices[4],OLATA,0x05)
    bus.write_byte_data(devices[0],OLATA,0x00)
    bus.write_byte_data(devices[0],OLATB,0x0A)
    time.sleep(swirlTime)
    bus.write_byte_data(devices[6],OLATA,0x28)
    bus.write_byte_data(devices[7],OLATB,0x00)
    bus.write_byte_data(devices[7],OLATA,0x05)
    bus.write_byte_data(devices[1],OLATB,0x50)
    bus.write_byte_data(devices[2],OLATA,0x00)
    bus.write_byte_data(devices[2],OLATB,0x0A)
    bus.write_byte_data(devices[3],OLATA,0x40)
    bus.write_byte_data(devices[3],OLATB,0x01)
    bus.write_byte_data(devices[4],OLATA,0x28)
    bus.write_byte_data(devices[5],OLATB,0x00)
    bus.write_byte_data(devices[5],OLATA,0x05)
    bus.write_byte_data(devices[0],OLATB,0x50)
    time.sleep(swirlTime)
    bus.write_byte_data(devices[7],OLATA,0x28)
    bus.write_byte_data(devices[1],OLATB,0x00)
    bus.write_byte_data(devices[1],OLATA,0x05)
    bus.write_byte_data(devices[2],OLATB,0x50)
    bus.write_byte_data(devices[3],OLATA,0x00)
    bus.write_byte_data(devices[3],OLATB,0x0A)
    bus.write_byte_data(devices[4],OLATA,0x40)
    bus.write_byte_data(devices[4],OLATB,0x01)
    bus.write_byte_data(devices[5],OLATA,0x28)
    bus.write_byte_data(devices[6],OLATB,0x00)
    bus.write_byte_data(devices[6],OLATA,0x05)
    bus.write_byte_data(devices[0],OLATB,0x00)
    bus.write_byte_data(devices[0],OLATA,0x05)
    time.sleep(swirlTime)
    bus.write_byte_data(devices[1],OLATA,0x28)
    bus.write_byte_data(devices[2],OLATB,0x00)
    bus.write_byte_data(devices[2],OLATA,0x05)
    bus.write_byte_data(devices[3],OLATB,0x50)
    bus.write_byte_data(devices[4],OLATA,0x00)
    bus.write_byte_data(devices[4],OLATB,0x0A)
    bus.write_byte_data(devices[5],OLATA,0x40)
    bus.write_byte_data(devices[5],OLATB,0x01)
    bus.write_byte_data(devices[6],OLATA,0x28)
    bus.write_byte_data(devices[7],OLATB,0x00)
    bus.write_byte_data(devices[7],OLATA,0x05)
    bus.write_byte_data(devices[0],OLATA,0x28)
    time.sleep(swirlTime)

def blinks():
    allClear()
    randomBlink()
    randomBlink()
    randomBlink()
    randomBlink()
    randomBlink()
    randomBlink()
    randomBlink()
    randomBlink()
    randomBlink()
    randomBlink()
    randomBlink()
    randomBlink()
    randomBlink()
    randomBlink()
    randomBlink()
    randomBlink()
    randomBlink()
    randomBlink()
    
def randomBlink():
    c = colors[random.randint(0,6)]
    if c == "red":
        redBlink(devices[random.randint(0,7)])
    elif c == "green":
        greenBlink(devices[random.randint(0,7)])
    elif c == "blue":
        blueBlink(devices[random.randint(0,7)])
    elif c == "yellow":
        yellowBlink(devices[random.randint(0,7)])
    elif c == "purple":
        purpleBlink(devices[random.randint(0,7)])
    elif c == "lightblue":
        lightBlueBlink(devices[random.randint(0,7)])
    elif c == "white":
        whiteBlink(devices[random.randint(0,7)])
    else:
        allClear()
        errorState()
        allIdle()
    
def allIdle():
    allClear()
    idleState(devices[0])
    idleState(devices[1])
    idleState(devices[2])
    idleState(devices[3])
    idleState(devices[4])
    idleState(devices[5])
    idleState(devices[6])
    idleState(devices[7])
    
def allClear():
    clear(devices[7])
    clear(devices[6])
    clear(devices[5])
    clear(devices[4])
    clear(devices[3])
    clear(devices[2])
    clear(devices[1])
    clear(devices[0])

def fourKBC():
    allClear()
    bus.write_byte_data(devices[1],OLATA,0x24)
    bus.write_byte_data(devices[1],OLATB,0x49)

def threeKBC():
    allClear()
    bus.write_byte_data(devices[2],OLATA,0x24)
    bus.write_byte_data(devices[2],OLATB,0x49)
        
def twoKBC():
    allClear()
    bus.write_byte_data(devices[3],OLATA,0x24)
    bus.write_byte_data(devices[3],OLATB,0x49)    
    
def oneKBC():
    allClear()
    bus.write_byte_data(devices[4],OLATA,0x24)
    bus.write_byte_data(devices[4],OLATB,0x49)

def zero():
    allClear()
    bus.write_byte_data(devices[5],OLATA,0x24)
    bus.write_byte_data(devices[5],OLATB,0x49)

def oneKAD():
    allClear()
    bus.write_byte_data(devices[6],OLATA,0x24)
    bus.write_byte_data(devices[6],OLATB,0x49)

def twoKAD():
    allClear()
    bus.write_byte_data(devices[7],OLATA,0x24)
    bus.write_byte_data(devices[7],OLATB,0x49)

def fail():
    allClear()
    for x in range(14):
        redBlink(devices[random.randint(0,7)])
    bus.write_byte_data(devices[random.randint(0,7)],banks[random.randint(0,1)],random.randint(0,255))
    bus.write_byte_data(devices[random.randint(0,7)],banks[random.randint(0,1)],random.randint(0,255))
    bus.write_byte_data(devices[random.randint(0,7)],banks[random.randint(0,1)],random.randint(0,255))
    bus.write_byte_data(devices[random.randint(0,7)],banks[random.randint(0,1)],random.randint(0,255))
    bus.write_byte_data(devices[random.randint(0,7)],banks[random.randint(0,1)],random.randint(0,255))
    bus.write_byte_data(devices[random.randint(0,7)],banks[random.randint(0,1)],random.randint(0,255))

#MQTT On Connect
def on_connect(client, obj, flags, rc):
    print("Reconnecting: "+str(rc))
    print("Subscribing to 'lights'")
    client.subscribe("lights") 


#MQTT callback and monitoring
def on_message(client, usrdata, message):
    msg = str(message.payload.decode("utf-8")).strip()
    print("received message =",msg)
    #commands section
    if msg == "clear":
        allClear()
    elif msg == "idle":
        allClear()
        allIdle()
    elif msg == "blink":
        allClear()
        blinks()
    elif msg == "test":
        test()
    elif msg == "4000bc":
        rampUp()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        allClear()
        blinks()
        fourKBC()
    elif msg == "3000bc":
        rampUp()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        allClear()
        allIdle()
        blinks()
        threeKBC()
    elif msg == "2000bc":
        rampUp()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        allClear()
        allIdle()
        blinks()
        twoKBC()
    elif msg == "1000bc":
        rampUp()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        allClear()
        allIdle()
        blinks()
        oneKBC()
    elif msg == "zero":
        rampUp()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        allClear()
        allIdle()
        blinks()
        zero()
    elif msg == "1000ad":
        rampUp()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        allClear()
        allIdle()
        blinks()
        oneKAD()
    elif msg == "2000ad":
        rampUp()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        allClear()
        allIdle()
        blinks()
        twoKAD()
    elif msg == "fail":
        rampUp()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        fullSwirl()
        allClear()
        allIdle()
        fail()
    elif msg == "close":
        redBlink(devices[0])
        allClear()
        print("Closing Connection")
        client.disconnect()
        client.loop_stop()
        print("Program Shutdown")
    else:
        allClear()
        errorState()
        allIdle()

def main():
    for dev in devices:
        setup(dev)
    client = paho.Client("client-001") #create client object
    client.on_message=on_message #Bind function to callback
    client.on_connect=on_connect
    print("connecting to broker ",broker)
    client.connect(broker)
    #print("Subscribing")
    #client.subscribe("lights")   
    client.loop_forever() #start loop to process recieved messages

        
if __name__ == "__main__":
    main()
